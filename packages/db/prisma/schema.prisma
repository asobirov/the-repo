// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Post Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   Json?
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    authorId  String

    author User @relation(fields: [authorId], references: [id])
}

// 

model Transaction {
    id String @id @default(cuid())

    description String
    amount      Float
    balance     Float

    type   TransactionType @relation(fields: [typeId], references: [id])
    typeId String

    category   TransactionCategory? @relation(fields: [categoryId], references: [id])
    categoryId String?

    transactionDate DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TransactionType {
    id String @id @default(cuid())

    code        String
    description String?

    transactions Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TransactionCategory {
    id String @id @default(cuid())

    name String

    // String to check for similarity in transaction description
    // e.g. "Pizza", "Pizza Hut"
    stringMatch String

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Transaction Transaction[]
}
